{
    "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-",
    "editor.suggestSelection": "first",
    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",

    // EDITOR CONFIG
    //
    "editor.fontFamily": "JetBrains Mono",
    "editor.fontSize": 15,
    "editor.lineHeight": 0,
    "editor.lineNumbers": "on",
    "editor.quickSuggestions": true,
    "editor.quickSuggestionsDelay": 10,
    "editor.autoClosingBrackets": "always", //true
    "editor.cursorStyle": "line",
    "editor.tabCompletion": "on",// true
    "editor.fontWeight": "normal",
    "editor.tokenColorCustomizations": {
        // "comments": "#6B7280"       
        "comments": "#9CA3AF"       

    },
    // "editor.minimap.maxColumn": 300,
    "editor.wordWrapColumn": 80,
    "editor.mouseWheelZoom": true,
    //
    // VIM CONFIG
    //
    // What key should <leader> map to in remappings?
    "vim.leader": ",",
    // Remapped keys in normal mode. Allows mapping to vim commands or vscode actions. See README for more.
    "vim.normalModeKeyBindings": [
        // <leader>w : save current file
        {
            "before": ["leader", "w"],
            "after": [],
            "commands": [
                {
                    "command": "workbench.action.files.save",
                    "args": []
                }
            ]
        },
        //Go to implementation
        {
            "before": ["g","i"],
            "after": [],
            "commands": [
                {
                    "command": "editor.action.goToImplementation",
                    "args": []
                }
            ]
        },

        // <leader>gs : generate Getters and Setters || required Java Code Generators -> sohibe.java-generate-setters-getters
        {
            "before": ["leader", "g", "s"],
            "after": [],
            "commands": [
                {
                    "command": "extension.javaGenerateGettersAndSetter",
                    "args": []
                }
            ]
        },
        //Generate construct || required Java Code Generators -> sohibe.java-generate-setters-getters
        {
            "before": ["leader", "g", "c"],
            "after": [],
            "commands": [
                {
                    "command": "extension.javaGenerateConstructorUsingFields",
                    "args": []
                }
            ]
        },

        //Select all matches
        {
            "before": ["g", "B"],
            "after": [],
            "commands": [
                {
                    "command": "editor.action.selectHighlights",
                    "args": []
                }
            ]
        },
        // Closing tabs
        {
            "before": ["leader", "q"],
            "after": [],
            "commands": [
                {
                    "command": "workbench.action.closeActiveEditor",
                    "args": []
                }
            ]
        },
        
        // Re-open tabs
        {
            "before": ["leader", "Q"],
            "after": [],
            "commands": [
                {
                    "command": "workbench.action.reopenClosedEditor",
                    "args": []
                }
            ]
        },

        // Format document
        {
            "before": ["leader", "f"],
            "after": [],
            "commands": [
                {
                    "command": "editor.action.formatDocument",
                    "args": []
                }
            ]
        },

        //go to next error
        {
            "before": ["leader", "n"],
            "after": [],
            "commands": [
                {
                    "command": "editor.action.marker.next",
                    "args": []
                }
            ]
        },

        //terminal focus
        {
            "before": ["leader", "T"],
            "after": [],
            "commands": [
                {
                    "command": "terminal.focus",
                    "args": []
                }
            ]
        },

        //Organize Imports
        {
            "before": ["leader", "o","i"],
            "after": [],
            "commands": [
                {
                    "command": "editor.action.organizeImports",
                    "args": []
                }
            ]
        },

        //Rename file
        {
            "before": ["leader", "r","f"],
            "after": [],
            "commands": [
                {
                    "command": "renameFile",
                    "args": []
                }
            ]
        },

        //Rename element
        {
            "before": ["leader", "r","e"],
            "after": [],
            "commands": [
                {
                    "command": "editor.action.rename",
                    "args": []
                }
            ]
        },

        // Reveal in explorer => FILE PATH
        {
            "before": ["leader", "f","p"],
            "after": [],
            "commands": [
                {
                    "command": "revealFileInOS",
                    "args": []
                }
            ]
        },

        // Reveal in explorer of proyect = file sidebard
        {
            "before": ["leader", "f","s"],
            "after": [],
            "commands": [
                {
                    "command": "workbench.files.action.showActiveFileInExplorer",
                    "args": []
                }
            ]
        },



    ],
    // Option to delegate certain key combinations back to VSCode to be handled natively
    "vim.handleKeys": {
        "<C-a>": false,
        "<C-f>": false,
        "<C-w>": false,
        "<C-c>": false,
        "<C-v>": false,
        "<C-b>": false,
        "<C-o>": false
    },
    // Remapped keys in insert mode. Allows mapping to vim commands or vscode actions. See README for more.
    "vim.insertModeKeyBindings": [
        // bind jj to <ESC> in insert mode
        {
            "before": ["j", "j"],
            "after": ["<Esc>"]
        },
        {
            "before": ["k", "k"],
            "after": ["<Esc>"]
        },
        // {
        //     "before": ["l", "l"],
        //     "after": ["<Esc>"]
        // },
        {
            "before": ["h", "h"],
            "after": ["<Esc>"]
        }
    ],
    // Non-recursive remapped keys in normal mode. Allows mapping to vim commands or vscode actions. See README for more.
    // "vim.otherModesKeyBindingsNonRecursive": [

    "vim.visualModeKeyBindingsNonRecursive": [
        // map : to show command palette
        {
            "before": [":"],
            "after": [],
            "commands": [
                {
                    "command": "workbench.action.showCommands",
                    "args": []
                }
            ]
        },
        // ZZ save current file
        {
            "before": ["Z", "Z"],
            "after": [],
            "commands": [
                {
                    "command": "workbench.action.files.save",
                    "args": []
                },
                {
                    "command": "workbench.action.closeActiveEditor",
                    "args": []
                }
            ]
        },
        // <leader>c : uncomment/comment line
        {
            "before": ["leader", "c"],
            "after": [],
            "commands": [
                {
                    "command": "editor.action.commentLine",
                    "args": []
                }
            ]
        },
        // vim multicursor select next match
        {
            "before": ["<C-n>"],
            "after": [],
            "commands": [
                {
                    "command": "editor.action.addSelectionToNextFindMatch",
                    "args": []
                }
            ]
        },
        // vim multicursor like skip match
        {
            "before": ["<C-x>"],
            "after": [],
            "commands": [
                {
                    "command": "editor.action.moveSelectionToNextFindMatch",
                    "args": []
                }
            ]
        }
    ],
    // Allow VSCodeVim to change status bar color based on mode
    "vim.statusBarColorControl": true,
    // Customize colors per mode when VSCodeVim controls status bar colors
    // "vim.statusBarColors" : {
    //     "normal": "#005f5f",
    //     "insert": "#5f0000",
    //     "visual": "#5f00af",
    //     "visualline": "#005f87",
    //     "visualblock": "#86592d",
    //     "replace": "#000000"
    // },
    // "vim.statusBarColors.normal": ["#005f5f", "#f2f2f2"],
    // "vim.statusBarColors.insert": "#5f0000",
    // "vim.statusBarColors.visual": "#5f00af",
    // "vim.statusBarColors.visualline": "#005f87",
    // "vim.statusBarColors.visualblock": "#86592d",
    // "vim.statusBarColors.replace": "#D08770",
    // "vim.statusBarColors.commandlineinprogress": "#007ACC",
    // "vim.statusBarColors.searchinprogressmode": "#007ACC",
    // "vim.statusBarColors.easymotionmode": "#007ACC",
    // "vim.statusBarColors.easymotioninputmode": "#007ACC",
    // "vim.statusBarColors.surroundinputmode": "#007ACC",
    "vim.statusBarColors.normal": ["#0E7490", "#f2f2f2"],
    "vim.statusBarColors.insert": "#991B1B",
    "vim.statusBarColors.visual": "#6B21A8",
    "vim.statusBarColors.visualline": "#005f87",
    "vim.statusBarColors.visualblock": "#155E75",
    "vim.statusBarColors.replace": "#C026D3",
    "vim.statusBarColors.commandlineinprogress": "#166534",
    "vim.statusBarColors.searchinprogressmode": "#B45309",
    "vim.statusBarColors.easymotionmode": "#007ACC",
    "vim.statusBarColors.easymotioninputmode": "#007ACC",
    "vim.statusBarColors.surroundinputmode": "#007ACC",
    
    // Enable some vim ctrl key commands that override otherwise common operations, like ctrl+c
    "vim.useCtrlKeys": true,
    // Color of the search highlight.
    "vim.searchHighlightColor": "rgba(150, 150, 255, 0.3)",
    // Use system clipboard for unnamed register.
    "vim.useSystemClipboard": false,
    // Override VSCode's copy command with our own copy command, which works better with VSCodeVim. Turn this off if copying is not working.
    "vim.overrideCopy": true,
    // Non-recursive keybinding overrides to use for insert mode. Allows mapping to vim commands or vscode actions. See README for more.
    "vim.insertModeKeyBindingsNonRecursive": [],
    // Width to word-wrap to when using gq.
    "vim.textwidth": 80,
    // Timeout in milliseconds for remapped commands
    "vim.timeout": 1000,
    // Use a non blinking block cursor.
    "vim.useSolidBlockCursor": false,
    // Number of lines to scroll with CTRL-U and CTRL-D commands.
    "vim.scroll": 20,
    // Show the text of any command you are in the middle of writing.
    "vim.showcmd": true,
    // keywords contain alphanumeric characters and '_'
    "vim.iskeyword": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-",
    // Ignore case in search patterns.
    "vim.ignorecase": true,
    // Override the 'ignorecase' option if the search pattern contains upper case characters.
    "vim.smartcase": true,
    // Enable the EasyMotion plugin for Vim.
    "vim.easymotion": true,
    // Set a custom background color for EasyMotion markers.
    "vim.easymotionMarkerBackgroundColor": "#000000",
    // Set a custom color for the text on one character long markers.
    "vim.easymotionMarkerForegroundColorOneChar": "#ff0000",
    // Set a custom color for the text on two character long markers.
    "vim.easymotionMarkerForegroundColorTwoCharFirst": "#ffa500", 
    // Set the font weight of the marker text.
    "vim.easymotionMarkerFontWeight": "normal",
    // Enable the Surround plugin for Vim.
    "vim.surround": true,
    // Show all matches of the most recent search pattern
    "vim.hlsearch": false,
    // Show where a / search matches as you type it.
    "vim.incsearch": true,
    // How much search or command history should be remembered
    "vim.history": 50,
    // Indent code automatically.
    "vim.autoindent": true,
    // Start in Insert Mode.
    "vim.startInInsertMode": false,
    // In visual mode, start a search with * or # using the current selection
    "vim.visualstar": false,
    // Uses a hack to move around folds properly
    "vim.foldfix": false,
    // Get rid of that annoying pop up that shows up everytime you type gc or gb
    "vim.disableAnnoyingGcMessage": false,
    // Use neovim on backend. (only works for Ex commands right now). You should restart VScode after enable/disabling this for the changes to take effect. NOTE: Neovim must be installed and neovimPath must be set the executable in order for this setting to work. Otherwise, vscodevim will crash.
    "vim.enableNeovim": false,
    // Path to run neovim executable. For example, /usr/bin/nvim, or 
    "vim.neovimPath": "nvim",
    // Get rid of that annoying message that shows up everytime you make a new file
    "vim.disableAnnoyingNeovimMessage": true,
    //
    // FILE CONFIG
    //
    "files.exclude": {
        "**/.classpath": true,
        "**/.project": true,
        "**/.settings": true,
        "**/.factorypath": true
    },
    "files.hotExit": "off",
    //
    // TERMINAL CONFIG
    //
    // "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe",
    "terminal.integrated.profiles.windows": {
        "Git Bash": {
            "source": "Git Bash",
        },
        "PowerShell": {
            "source": "PowerShell",
            "icon": "terminal-powershell"
        },
        "Command Prompt": {
            "path": [
                "${env:windir}\\Sysnative\\cmd.exe",
                "${env:windir}\\System32\\cmd.exe"
            ],
            "args": [],
            "icon": "terminal-cmd"
        },
    },
    "terminal.integrated.defaultProfile.windows": "Git Bash",
    // "terminal.integrated.shell.windows": "alacrity",
    "terminal.integrated.fontFamily": "JetBrains Mono",
    "terminal.integrated.fontSize": 13,
    "terminal.integrated.lineHeight": 1.2,
    "terminal.integrated.drawBoldTextInBrightColors": true,
    // "terminal.external.linuxExec": "alacrity",
    // "terminal.integrated.shell.linux": "zbash",
    "terminal.integrated.scrollback": 10000,
    //
    // TELEMETRY
    //
    "telemetry.enableTelemetry": true,
    "telemetry.enableCrashReporter": true,
    //
    // WINDOW CONFIG
    //
    "window.openFilesInNewWindow": "off",
    "window.openFoldersInNewWindow": "off",
    //
    // WORKBENCH CONFIG
    //
    "workbench.editor.enablePreview": false,
    "workbench.editor.enablePreviewFromQuickOpen": false,
    "workbench.colorCustomizations": {
        "[Gruvbox Dark (Hard)]": {
            "tab.activeBackground": "#0e639c",
            "tab.activeBorder": "#0e639c",
            "tab.unfocusedActiveBorder": "#1fe8f7",
            "tab.hoverBackground": "#5a5a5a",
            "tab.hoverBorder": "#5a5a5a",
            "tab.unfocusedHoverBorder": "#5a5a5a"
        },
        "[Andromeda Bordered]": {
            "tab.activeBorder": "#10B981",
            "tab.hoverBorder": "#F59E0B",
            "panelTitle.activeBorder": "#059669",
            "tab.inactiveForeground": "#9CA3AF",
            "editor.lineHighlightBackground": "#374151",
            "editor.selectionBackground": "#374151",
            "editor.wordHighlightBackground": "#4B5563",
            "editorCursor.foreground": "#F59E0B",
            "sideBar.foreground": "#9CA3AF",
            "list.focusBackground": "#4B5563",
            "statusBarItem.hoverBackground": "#4B5563",
            "terminal.ansiBlue": "#0284C7",
            "terminal.ansiBrightBlack": "#D4D4D8"
        },
        "statusBar.background": "#0E7490",
        "statusBar.noFolderBackground": "#0E7490",
        "statusBar.debuggingBackground": "#0E7490",
        "statusBar.foreground": "#f2f2f2",
        "statusBar.debuggingForeground": "#f2f2f2"
    },
    "window.titleBarStyle": "custom",
    // "files.autoSave": "off",


    // // CODE-RUNNER
    // //
    // "code-runner.executorMap": {
    //     "javascript": "node",
    //     "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
    //     "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    //     "cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    //     "objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    //     "php": "php",
    //     "python": "py",
    //     "perl": "perl",
    //     "ruby": "ruby",
    //     "go": "go run",
    //     "lua": "lua",
    //     "groovy": "groovy",
    //     "powershell": "powershell -ExecutionPolicy ByPass -File",
    //     "bat": "cmd /c",
    //     "shellscript": "C:\\Windows\\system32\\bash.exe",
    //     "fsharp": "fsi",
    //     "csharp": "scriptcs",
    //     "vbscript": "cscript //Nologo",
    //     "typescript": "ts-node",
    //     "coffeescript": "coffee",
    //     "scala": "scala",
    //     "swift": "swift",
    //     "julia": "julia",
    //     "crystal": "crystal",
    //     "ocaml": "ocaml",
    //     "r": "Rscript",
    //     "applescript": "osascript",
    //     "clojure": "lein exec",
    //     "haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
    //     "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
    //     "racket": "racket",
    //     "ahk": "autohotkey",
    //     "autoit": "autoit3",
    //     "kotlin": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
    //     "dart": "dart",
    //     "pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt"
    // },
    //
    //EXPLORER CONFIG
    //
    "explorer.autoReveal": false,
    "editor.accessibilityPageSize": 13,
    "cSpell.userWords": [
        "autowired"
    ],
    "[typescript]": {
        "editor.defaultFormatter": "vscode.typescript-language-features"
    },
    "[html]": {
        "editor.defaultFormatter": "vscode.html-language-features"
    },
    "redhat.telemetry.enabled": true,
    "java.project.importOnFirstTimeStartup": "automatic",
    "cSpell.enableFiletypes": [
        "spring-boot-properties-yaml"
    ],
    "terminal.integrated.rendererType": "dom",
    "[javascript]": {
        "editor.defaultFormatter": "vscode.typescript-language-features"
    },
    "javascript.updateImportsOnFileMove.enabled": "always",
    "workbench.colorTheme": "Andromeda Bordered",
    "java.refactor.renameFromFileExplorer": "autoApply",
    "tabnine.experimentalAutoImports": true,
    "workbench.iconTheme": "material-icon-theme",
    "kite.showWelcomeNotificationOnStartup": false,
    "editor.fontLigatures": true,
    "java.home": "C:\\Program Files\\Java\\java-11-openjdk-11.0.12.7",
    "maven.executable.path": "d:\\Gustavo\\tools\\apache-maven-3.8.3\\bin\\mvn.cmd",
}
